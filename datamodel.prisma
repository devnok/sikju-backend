type User{
  id: ID! @id
  name: String
  username: String! @unique
  phone: String @unique
  password: String
  point: Int! @default(value: 0)
  restUser: RestUser @relation(link: INLINE, name: "UserRestUser", onDelete: CASCADE)
  identity: Identity @relation(link: INLINE, name: "UserIdentity", onDelete: CASCADE) @unique
  facebookId: String @unique
  kakaoId: String @unique
  secret: String
  email: String
  age_range: String
  birthday: DateTime
  gender: Gender
  phoneConfirmed: Boolean! @default(value: false)
  reviews: [Review!]! @relation(name: "ReviewsOfUser", onDelete: CASCADE)
  likes: [Like!]! @relation(name: "LikesOfUser", onDelete: CASCADE)
  coupons: [Coupon!]! @relation(name: "CouponsOfUser", onDelete: CASCADE)
}
type Coupon{
  id: ID! @id
  title: String!
  user: User! @relation(name: "CouponsOfUser", onDelete: SET_NULL)
  rest: Rest! @relation(name: "CouponsOfRest", onDelete: SET_NULL)
  desc: String
  warn: String
  created_at: DateTime! @createdAt
  validTime: Int! @default(value: 168)
}
enum Gender{
  FEMALE
  MALE
}
type Like {
  id: ID! @id
  user: User @relation(name: "LikesOfUser")
  rest: Rest @relation(name: "LikeOfRest")
}
type Identity{
  id: ID! @id
  token: String!
  user: User! @relation(name: "UserIdentity") @unique
  provider: Provider!
}
enum Provider{
  FACEBOOK
  KAKAO
}
type Rest{
  id: ID! @id
  menu: [Food!]!
  name: String!
  info: String!
  phone: String
  coupons: [Coupon!]! @relation(name: "CouponsOfRest", onDelete: CASCADE)
  likes: [Like!]! @relation(name: "LikeOfPost", onDelete: CASCADE)
  reviews: [Review!]! @relation(name: "ReviewsOfRest", onDelete: CASCADE)
  files: [RestFile!]! @relation(name: "FilesOfRest", onDelete: CASCADE)
  location: Location! @unique @relation(onDelete: CASCADE)
  restUser: RestUser @relation(name: "RestUserRest")
  couponInput: CouponInput @relation(name: "CouponInputOfRest", link: INLINE)
}
type CouponInput{
  id: ID! @id
  rest: Rest! @relation(name: "CouponInputOfRest")
  title: String
  desc: String
  warn: String
  validTime: Int! @default(value: 168) #시간 단위
}
type RestFile{
  id: ID! @id
  url: String!
  rest: Rest! @relation(name: "FilesOfRest")
}
type RestUser{
  id: ID! @id
  rest: Rest! @unique @relation(link: INLINE, name: "RestUserRest", onDelete: CASCADE)
  user: User! @unique @relation(name: "UserRestUser", onDelete: SET_NULL)
  bids: [Bid!]!
}
type Food{
  id: ID! @id
  file: FoodFile @relation(link: INLINE)
  name: String!
  desc: String!
  cost: Int!
  options: [Option!]!
}
type Option{
  id: ID! @id
  title: String!
  text: String! @default(value: "")
}
type FoodFile{
  id: ID! @id
  url: String!
  food: Food!
}
type Review{
  id: ID! @id
  rating: Int!
  files: [ReviewFile!]! @relation(name: "FilesOfReview", onDelete: CASCADE)
  created_at: DateTime! @createdAt
  updated_at: DateTime! @updatedAt
  text: String!
  user: User @relation(name: "ReviewsOfUser")
  rest: Rest @relation(name: "ReviewsOfRest")
}
type ReviewFile{
  id: ID! @id
  url: String!
  review: Review! @relation(name: "FilesOfReview")
}
type Location{
  id: ID! @id
  latitude: Float!
  longitude: Float!
}
type Auction{
  id: ID! @id
  location: Location! @relation(onDelete: CASCADE)
  n: Int!
  text: String! @default(value: "")
  owner: User!
  created_at: DateTime! @createdAt
  bids: [Bid!]!
}
type Bid{
  id: ID! @id
  auction: Auction!
  service: String!
  restUser: RestUser!
  win: Boolean
}
type Secret{
  id: ID! @id
  phone: String! @unique
  secret: String!
}
type Event{
  id: ID! @id
  url: String!
  thumnail: String!
  created_at: DateTime! @createdAt
  start_at: DateTime!
  expire_at: DateTime!
}